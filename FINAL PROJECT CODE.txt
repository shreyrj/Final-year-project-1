                                         DEPRESSION DETECTION SYSTEM USING MACHINE LERANING 
**************MODELS*********************
from django.db import models

# Create your models here.
class accounts(models.Model):
    class Meta:
        managed = True
        db_table='account'

    name = models.CharField(max_length=30)
    username = models.CharField(max_length=30)
    password = models.CharField(max_length=50)
    email = models.CharField(max_length=30)
    phone = models.CharField(max_length=15)
    dateofbirth = models.CharField(max_length=15)


class questions(models.Model):
    class Meta:
        managed = True
        db_table='questions'

    question = models.CharField(max_length=255)
    # option1 = models.CharField(max_length=255)
    # option2 = models.CharField(max_length=255)
    # option3 = models.CharField(max_length=255,default ='None')
    # option4 = models.CharField(max_length=255,default = 'None')
    # correct_option = models.CharField(max_length=255,default='None')
    category = models.CharField(max_length=30)
    is_enabled = models.IntegerField(default = 1)    


class custom_ans(models.Model):
    class Meta:
        managed = True
        db_table='temp_answer'

    Userid = models.IntegerField()
    Questionid = models.IntegerField()
    Answer = models.CharField(max_length=30)


class Progress_questions(models.Model):
    class Meta:
        managed = True
        db_table='progress_questions'

    Pr_question = models.CharField(max_length=255)
    # Pr_option1 = models.CharField(max_length=255)
    # Pr_option2 = models.CharField(max_length=255)
    # Pr_option3 = models.CharField(max_length=255,default ='None')
    # Pr_option4 = models.CharField(max_length=255,default = 'None')
    # Pr_correct_option = models.CharField(max_length=255,default='None')
    Pr_category = models.CharField(max_length=30)
    Pr_is_enabled = models.IntegerField(default = 1)       


class Suggestions(models.Model):
    class Meta:
        managed = True
        db_table='suggetion'

    Suggestion = models.CharField(max_length=255)
    Title = models.CharField(max_length=255)

    is_enabled = models.IntegerField(default = 1)       


class Testresult(models.Model):
    class Meta:
        managed = True
        db_table:"Result"
    
    progress=models.CharField(max_length=250,default=None)
    depression=models.CharField(max_length=250,default=None)
    depressionResult=models.CharField(max_length=250,default=None)
    progressResult=models.CharField(max_length=250,default=None)
    userId=models.IntegerField()     
 

class doctor(models.Model):
    class Meta:
        db_table='doctor'

    name = models.CharField(max_length=30)
    contact = models.CharField(max_length=30)
    email = models.CharField(max_length=30)
    address = models.CharField(max_length=150) 
    is_enabled = models.IntegerField(default = 0)     


************************VIEWS*********************
from django.shortcuts import render
from DepressionApp.models import *
from django.http import HttpResponse
import json
from django.contrib import messages
import sweetify
from flask import Flask, session
from django.views.decorators.csrf import csrf_exempt
from datetime import date,datetime
from DepressionApp import train_model 
import random


 

# Create your views here.
@csrf_exempt
def registerView(request):
    res = ""
    # default_image = "dairy.jpg"
    default = 0
    if request.method == 'POST':
        name = request.POST["name"]
        username = request.POST["username"]
        password = request.POST["password"]
        email = request.POST["email"]
        phone = request.POST["phone"]
        dateofbirth = request.POST["date"]
       
        x = dateofbirth.split("- ")
        year = x[0]
        month = x[1]
        day = x[2]
        today = date.today()
        
        age = today.year - int(year) - ((today.month, today.day) < (int(month),int(day)))

        print(type(age))
        
        if (age <= 15):
               res = "Not elligible to use this application"
               
        
        elif accounts.objects.filter(username=username).exists():
                 res = "Username Already Exists"
                
        
        elif accounts.objects.filter( email=email ).exists():
                res = "Email id Already Exists"
            
      
        else:
            data = accounts(name=name, username=username,
                            password=password, email=email, phone=phone,dateofbirth=dateofbirth)
            data.save()
    
            res = "Account Created Successfully"
           
    return HttpResponse(res)

@csrf_exempt
def loginView(request):
    res = ""
    data=[]
    if request.method == 'GET':
        email= request.GET["username"]
        password = request.GET["password"]
        users = accounts.objects.filter(
            email=email, password=password).order_by('id')[:1]
        
        if not users:
             res = "invalid"
             names={"response":res}
             data.append(names)
        else:
              for user in users:
                 ids=user.id
                #  request.session['id'] =user.id
                #  request.session.modified=True
                #  request.session.save
                #  print(request.session['id'])

            

                 res = "valid"
                 names={"response":res ,"id":ids,"email":user.email,"Username":user.username}
                 data.append(names)

    return HttpResponse(json.dumps(data), content_type="application/json")

def IndexView(request):
      return render(request,'index.html')

def logout(request):
      return render(request,'index.html')

def Admin_login(request):
    if request.method == 'POST':
        UserID = request.POST["userid"]
        Password = request.POST["password"]
        if UserID =="Admin" and Password =="Admin":
         return render(request,'Home/Home.html')
        else:
            messages.error(request,'Invalid login credentials')
            return render(request,'index.html')

def AddQuestion(request):
    data=questions.objects.all().values()
    print(data)
    
    return render(request,'Home/AddDepressionQuestion.html',{'Questions':data})

def SaveQuestionsView(request):
    if request.method == 'POST':
         Question = request.POST["Question"]
        #  option1 = request.POST["option1"]
        #  option2 = request.POST["option2"]
        #  option3 = request.POST["option3"]
        #  option4 = request.POST["option4"]
        #  Answer = request.POST["correctAns"]
         category=request.POST["selectcategory"]
        #  form = NewRegistration()
        #  if form.va



         data = questions(question=Question,category=category)
            
         data.save()
         questionsData=questions.objects.all().values()

         sweetify.success(request, 'Added', text='Successfully Added ', persistent='OK')
                

                # messages.error(request,'Successfully Added')    
    

    return render(request,'Home/AddDepressionQuestion.html',{'Questions':questionsData} )

def get_Questions(request): 

    if request.method == 'GET':
        category=""
        userIds=request.GET["userId"]
        Questions_data=[]
       
        users = accounts.objects.filter(
            id=userIds).values()
       
        for data in users:
            date=data['dateofbirth']
        
        x = str(date).split("- ")
        year = x[0]
        month = x[1]
        day = x[2]
        print(datetime.today().strftime('%Y-%m-%d')) 
        today =datetime.today()
        age = today.year - int(year) - ((today.month, today.day) < (int(month),int(day)))
        print(age)
        
        if (age >15 and age <19):
            category="Teenager"
        elif (age >18 and age <51) :
            category="Adult"
        else:
            category="Senior Citizen"
       
        # question=questions.objects.all().filter(is_enabled=1,category=category).values()[:10]
        
        Data=[]
        question=questions.objects.filter(is_enabled=1,category=category).order_by('id')[:10]

        # # question=questions.objects.filter(is_enabled=1,category=category).values('id')
        # for q in question.values():
        #     Data.append(q['id'])
        print(question.count())
        if question.count() <10:
            res={'response':"Contact Admin"}
            Questions_data.append(res)
        
        else:
            for q in question.values():
                res={
                    'response':"Success",
                    'id':q['id'],
                    'question':q['question'],
                    'category':q['category'],
                    }
                Questions_data.append(res)
        
        # for i in range(10):
        #    id=random.choice(Data), end = " "
        # print(question.count())
        # Question=questions.objects.filter(id=id).values()

        # Questions_data.extend(question.values())
        # print(Questions_data)
    
    return HttpResponse(json.dumps(Questions_data), content_type="application/json")

def get_Answer(request):
    if request.method =='GET':
        Answers=request.GET['Answers']   
        Id=request.GET['id']   
        data=[]
        json_list = []
        json_list.append(json.loads(Answers))
        json.dumps(json_list)
        print(json_list[0])
        my_lst_str = ','.join(map(str, json_list[0]))
        print(my_lst_str)
       
       
       
        result=train_model.result(json_list[0])
       

        if result[0] == 1:
            predict='Normal'
        elif result[0] == 2:
            predict='Mild'
        elif result[0] ==3:
            predict='Severe'    
        
        if Testresult.objects.filter(userId=Id).exists():
            Testresult.objects.filter(userId=Id).update(depression=my_lst_str,depressionResult=predict)  
        else: 
            Testresult(depression=my_lst_str,depressionResult=predict,progress="0",progressResult="0",userId=Id).save()
       
        if predict =='Mild':
            Returndata={"response":"Read books and Make Yoga"}
            data.append(Returndata)
        else:
            Returndata={"response":predict}
            data.append(Returndata)
    return HttpResponse(json.dumps(data), content_type="application/json")
    
def Add_Progress_Question(request):
     data=Progress_questions.objects.all().values()


     return render(request,'Home/AddProgressQuestion.html',{'Questions':data}  )

@csrf_exempt
def UpdateButtonDepression(request):
     if request.method == 'POST':
        Id = request.POST["Id"]
        flag = request.POST["flag"]
        print(Id,flag)
        questions.objects.filter(id=Id).update(is_enabled=flag)
        return render(request,'Home/AddDepressionQuestion.html')
    

def Add_ProgressQuestion(request):  
      if request.method == 'POST':
         Question = request.POST["Question"]
        #  option1 = request.POST["option1"]
        #  option2 = request.POST["option2"]
        #  option3 = request.POST["option3"]
        #  option4 = request.POST["option4"]
        #  Answer = request.POST["correctAns"]
         category=request.POST["selectcategory"]
       
         data = Progress_questions(Pr_question=Question,Pr_category=category)
            
         data.save()
         questionsData=Progress_questions.objects.all().values()

         sweetify.success(request, 'Added', text='Successfully Added ', persistent='OK')
                

                # messages.error(request,'Successfully Added')    
      return render(request,'Home/AddProgressQuestion.html',{'Questions':questionsData} )


@csrf_exempt
def UpdateButtonProgress(request):
      if request.method == 'POST':
        Id = request.POST["Id"]
        flag = request.POST["flag"]
        print(Id,flag)
        Progress_questions.objects.filter(id=Id).update(Pr_is_enabled=flag)
        return render(request,'Home/AddProgressQuestion.html')      

def getProgressQuestion(request):
      
     if request.method == 'GET':
        category=""
        userIds=request.GET["userId"]
        Questions_data=[]
       
        users = accounts.objects.filter(
            id=userIds).values()
       
        for data in users:
            date=data['dateofbirth']
        
        x = str(date).split("- ")
        year = x[0]
        month = x[1]
        day = x[2]
        print(datetime.today().strftime('%Y-%m-%d')) 
        today =datetime.today()
        age = today.year - int(year) - ((today.month, today.day) < (int(month),int(day)))
        print(age)
        category=""
        if (age >15 and age <19):
            category="Teenager"
        elif (age >18 and age <51) :
            category="Adult"
        else:
            category="Senior Citizen"
        DataSet=[]
        
        print(category)
        if Testresult.objects.filter(userId=userIds).exists():
            Data=Testresult.objects.filter(userId=userIds).values()
            if Data[0]['depression'] =="0":
                res={'response':"Please Attend Depression Test"}
                Questions_data.append(res)
            else:    
                question=Progress_questions.objects.all().filter(Pr_is_enabled=1,Pr_category=category).order_by('id')[:10]
                print(question.count())
                
                if question.count() <10:
                    res={'response':"Contact Admin"}
                    Questions_data.append(res)
                else:
                    for q in question.values():
                        res={
                            'response':"Success",
                            'id':q['id'],
                            'Pr_question':q['Pr_question'],
                            'Pr_category':q['Pr_category'],
                            'Pr_is_enabled':q['Pr_is_enabled']
                        }
                        Questions_data.append(res)
                

        # print(Questions_data)
        else:
            res={'response':"Please Attend Depression Test"}
            Questions_data.append(res)
    
     return HttpResponse(json.dumps(Questions_data), content_type="application/json")

def Progress_get_Answer(request):
    if request.method =='GET':
        Answers=request.GET['Progress_Answers']  
        Id=request.GET['id']   
 
        print(Answers)
        data=[]
       
        json_list = []
        json_list.append(json.loads(Answers))
        json.dumps(json_list)
        print(json_list[0])
        my_lst_str = ','.join(map(str, json_list[0]))
        print(my_lst_str)
            
        result=train_model.result(json_list[0])
        
        if result[0] == 1:
            predict='Normal'
        elif result[0] == 2:
            predict='Mild'
        elif result[0] ==3:
            predict='Severe'    
        
        if Testresult.objects.filter(userId=Id).exists():
            Testresult.objects.filter(userId=Id).update(progress=my_lst_str,progressResult=predict)  
        else: 
            Testresult(progress=my_lst_str,progressResult=predict,depression="0",depressionResult="0",userId=Id).save()
        
        if predict =='Mild':
            Returndata={"response":"Read books and Make Yoga"}
            data.append(Returndata)
        else:
            Returndata={"response":predict}
            data.append(Returndata)


    return HttpResponse(json.dumps(data), content_type="application/json")


def Suggetion(request):
    suggetions=Suggestions.objects.all().values()

    return render(request,'Home/Suggetion.html',{'Suggetions':suggetions})       


def Add_Suggetion(request):
    if request.method =='POST':
        Suggestion=request.POST['suggetion']
        Title=request.POST['title']
        data = Suggestions(Suggestion=Suggestion,Title=Title)
            
        data.save()
        suggetions=Suggestions.objects.all().values()

        sweetify.success(request, 'Added', text='Successfully Added ', persistent='OK')
                
    return render(request,'Home/Suggetion.html',{'Suggetions':suggetions})      

@csrf_exempt
def UpdateButtonSuggetion(request):
      if request.method == 'POST':
        Id = request.POST["Id"]
        flag = request.POST["flag"]
        print(Id,flag)
        Suggestions.objects.filter(id=Id).update(is_enabled=flag)
        return render(request,'Home/Suggetion.html') 

def Get_Suggetion(request):
    if request.method=='GET':
         data=[]
         suggetions=Suggestions.objects.all().filter(is_enabled=1).values()
         data.extend(suggetions)
    
    return HttpResponse(json.dumps(data), content_type="application/json")
     

def doctorview(request): 
    data=[]
    doctordata=doctor.objects.all().filter(is_enabled=1).values()
    data.extend(doctordata) 
    return HttpResponse(json.dumps(data), content_type="application/json")


def GetIqLevel(request):
    if request.method=="GET":
        userId=request.GET['id']
        if Testresult.objects.filter(userId=userId).exists():
            Data=Testresult.objects.filter(userId=userId).values()
            if Data[0]['progressResult']=='0':
                res="Please Attend ProgressTest"
            else:  
                Progress= Data[0]['progressResult']
                depression= Data[0]['depressionResult']
               
                if Progress=="Normal" and depression=="Normal":
                    res="High"
                elif Progress=="Normal" and depression=="Mild":
                    res="Medium"
                elif Progress=="Normal" and depression=="Severe":
                    res="Low"
               
                elif Progress=="Mild" and depression=="Mild":
                    res="Medium"
                elif Progress=="Mild" and depression=="Normal":
                    res="Medium"
                elif Progress=="Mild" and depression=="Severe":
                    res="Low"
   
                elif Progress=="Severe" and depression=="Mild":
                    res="Low"
                elif Progress=="Severe" and depression=="Normal":
                    res="Low"
                elif Progress=="Severe" and depression=="Severe":
                    res="Low"
   
        else: 
            res="Please Attend Test"
    
    return HttpResponse(res)

*******************TRAIN MODELS******************
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier

from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix, accuracy_score

import seaborn as sb

def result(resultlist):
  dataset=pd.read_csv('dataset.csv')

  dataset.shape

  X=np.array(dataset.iloc[:,:-1])
  X=X.astype(dtype='int')
  Y=np.array(dataset.iloc[:,-1])
  Y=Y.reshape(-1,)

  X_train, X_test, y_train, y_test =train_test_split(X,Y,test_size=0.25,
                                                   random_state=42)



  print(X_train.shape)
  model_RR=RandomForestClassifier(n_estimators=100,criterion='entropy',)
  model_RR.fit(X_train,y_train)
  # update X_test with your list
  print(resultlist)
  y_predicted_RR=model_RR.predict(np.array(resultlist).reshape(1,-1))
  print(y_predicted_RR)
  return y_predicted_RR
#   confusion=confusion_matrix(y_test,y_predicted_RR)
#   print(confusion)
#   accuracy_score(y_test,y_predicted_RR)
#   print(accuracy_score(y_test,y_predicted_RR))

#   confu_dataframe=pd.DataFrame(confusion)
#   sb.heatmap(confu_dataframe,annot=True,fmt='d')

************SETTINGS****************
"""
Django settings for DepressionServer project.

Generated by 'django-admin startproject' using Django 3.2.18.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-n4pwd5ge0s1kl6wb8_6zmo762p*67n-d0^b+9f%7b8uaf@ve!m'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['192.168.1.18']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'DepressionApp',
    'sweetify',
]
SWEETIFY_SWEETALERT_LIBRARY = 'sweetalert2'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'DepressionServer.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR,'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


WSGI_APPLICATION = 'DepressionServer.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'depression_detection',
        'USER': 'root',
        'PASSWORD': '',
        'HOST': 'localhost',
        'PORT': '3306',
        'OPTIONS': {
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
            'charset': 'utf8mb4',
        }
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
SESSION_ENGINE="django.contrib.sessions.backends.db"
SESSION_SAVE_EVERY_REQUEST=True

********************URLS****************
"""DepressionServer URL Configuration

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/3.2/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path
from DepressionApp.views import *


urlpatterns = [
    path('admin/', admin.site.urls),
    path('register/', registerView),
    path('login/', loginView),
    path('', IndexView),
    path('logout/', logout),
    path('Admin_login/',Admin_login),
    path('Depression_Question/',AddQuestion),
    path('Save_Questions/',SaveQuestionsView),
    path('get_Questions/',get_Questions),
    path('get_Answer/',get_Answer),
    path('progress_question/',Add_Progress_Question),
    path('Update_Depression_Button/',UpdateButtonDepression),
    path('AddProgressQuestion/',Add_ProgressQuestion),
    path('Update_Progress_Button/',UpdateButtonProgress),
    path('get_Progress_Question/',getProgressQuestion),
    path('get_Progress_Answer/',Progress_get_Answer),
    path('Suggetion/',Suggetion),
    path('Add_Suggetion/',Add_Suggetion),
    path('Update_Suggetion_Button/',UpdateButtonSuggetion),
    path('GetSuggestion/',Get_Suggetion),
    path('doctorview/',doctorview),
    path('getIq/',GetIqLevel),
]






        

